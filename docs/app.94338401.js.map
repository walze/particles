{"version":3,"file":"app.94338401.js","sources":["../src/config.ts","../src/Particle.ts","../src/helpers/random.ts","../src/canvas/particles.ts","../src/canvas/app.ts"],"sourcesContent":["export const resolution = 1.5\n\nconst isVertical = window.innerHeight > window.innerWidth\n\nconst w = window.innerWidth\nconst h = window.innerHeight\n\n// rw * h = rh * w\n// rw = rh * w / h\n// rh = rw * h / w\n\nconst r = isVertical ? 1080 : 1920\n\nconst width = isVertical ? r : (r * w) / h\nconst height = isVertical ? (r * h) / w : r\n\nexport const aspect = [\n  Math.floor(width),\n  Math.floor(height),\n] as const\n","import assert from 'assert'\nimport {\n  Sprite,\n  ParticleContainer as PC,\n  Texture,\n} from 'pixi.js'\nimport { aspect } from './config'\n\nconst [width, height] = aspect\n\nconst canvas = new OffscreenCanvas(\n  1,\n  1,\n) as unknown as HTMLCanvasElement\n\nconst ctx = canvas.getContext('2d')\nassert(ctx)\nctx.fillStyle = '#FFF'\nctx.fillRect(0, 0, 1, 1)\n\nconst WhiteTexture = Texture.from(canvas)\n\nconst G = 6.6743015e-11\nlet mass = 7.34767309e13\n\nconst gravity = (c1: [number, number], c2: [number, number]) => {\n  const [x1, y1] = c1\n  const [x2, y2] = c2\n\n  const dx = x2 - x1\n  const dy = y2 - y1\n\n  const d = Math.sqrt(dx ** 2 + dy ** 2)\n\n  const a = (G * mass) / d ** 2\n\n  const ux = dx / d\n  const uy = dy / d\n\n  const ax = ux * a\n  const ay = uy * a\n\n  mass *= 1 + G * 10\n\n  return [ax, ay, [dx, dy]] as [number, number, [number, number]]\n}\n\nconst center = [width / 2, height / 2] as [number, number]\n\nexport const update = (p: Particle) => {\n  const [nvx, nvy, dv] = gravity(p.coords, center)\n  p.vx += nvx\n  p.vy += nvy\n\n  const close = Math.sqrt(dv[0] ** 2 + dv[1] ** 2) <= 50\n  if (close) {\n    mass *= 1 + Math.sqrt(G) / 2\n\n    p.vx = 0\n    p.vy = 0\n    p.position.set(-100000, -100000)\n  }\n\n  p.position.set(p.x + p.vx, p.y + p.vy)\n}\n\nexport class Particle extends Sprite {\n  vx = -1\n  vy = -1\n\n  override name = `${this.x}${this.y}`\n\n  get coords() {\n    return [this.x, this.y] as [number, number]\n  }\n\n  constructor(x: number, y: number) {\n    super(WhiteTexture)\n\n    this.x = x\n    this.y = y\n  }\n}\n\nexport class ParticleContainer extends PC {\n  override children: Particle[] = []\n}\n","export const randomInt = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min + 1)) + min\n","import { randomInt } from '../helpers/random'\nimport { Particle, ParticleContainer } from '../Particle'\nimport { aspect } from '../config'\nimport { splitEvery } from 'ramda'\n\nconst [width, height] = aspect\nconst n = 200_000\nconsole.info('Rendering', n, 'particles')\n\nconst r = (d: number) => randomInt(1, d)\n\nexport const stage = new ParticleContainer(n)\nexport const particles = Array.from(\n  { length: n },\n  () => new Particle(r(width), r(height)),\n)\n\nconst split = splitEvery(100, particles)\n\nfor (let i = 0; i < split.length; i++) {\n  const p = split[i]\n\n  p && stage.addChild(...p)\n}\n","import { ParticleRenderer, Renderer, Ticker } from 'pixi.js'\nimport { type Particle, update as pUpdate } from '../Particle'\nimport { stage } from './particles'\n\nimport { aspect, resolution } from '../config'\nimport assert from 'assert'\n\nconst [width, height] = aspect\n\nconst isInBounds = ({ x, y }: { x: number; y: number }) =>\n  x > -1000 || x < width + 1000 || y > -1000 || y < height + 1000\n\nconst n = stage.children.length\nconst update = () => {\n  for (let i = 0; i < n; i++) {\n    const p = stage.children[i] as Particle\n\n    if (isInBounds(p)) pUpdate(p)\n  }\n}\n\nTicker.system.autoStart = false\n\nexport const ticker = new Ticker()\n\nconst view = document.querySelector('canvas')\nassert(view, 'No canvas element found')\n\nconst renderer = new Renderer({\n  view,\n  width,\n  height,\n  backgroundColor: 0x111111,\n  powerPreference: 'high-performance',\n  useContextAlpha: false,\n  antialias: false,\n  resolution,\n})\n\nconst pr = new ParticleRenderer(renderer)\nconst render = pr.render.bind(pr, stage)\n\nticker.add(update)\nticker.add(render)\n\nconst destroy = () => {\n  ticker.remove(update)\n  ticker.remove(render)\n  pr.destroy()\n  renderer.destroy()\n  stage.destroy({\n    children: true,\n  })\n}\n\nexport { renderer, update, destroy }\n"],"names":["resolution","isVertical","w","h","r","width","height","aspect","canvas","ctx","assert","WhiteTexture","Texture","G","mass","gravity","c1","c2","x1","y1","x2","y2","dx","dy","a","ux","uy","ax","ay","center","update","p","nvx","nvy","dv","Particle","Sprite","x","y","ParticleContainer","PC","randomInt","min","max","n","d","stage","particles","split","splitEvery","i","isInBounds","pUpdate","Ticker","ticker","view","renderer","Renderer","pr","ParticleRenderer","render","destroy"],"mappings":"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"}